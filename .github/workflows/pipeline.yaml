name: Quality Checks

on: pull_request
    
jobs:

  # Go stuff ########################################################################
  lint-check:
    runs-on: ubuntu-latest
    name: '[Go] Lint'
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - uses: actions/checkout@v3
      - run: |
          go mod tidy
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-pkg-cache: true
          skip-build-cache: true

  vet-check:
    runs-on: ubuntu-latest
    name: '[Go] Vet Check'
    steps:
      - uses: actions/checkout@master
      - name: LinRunning Go Vet
        run: |
          mkdir -p reports/vet
          go mod tidy
          offences=$(go vet ./...)
          if [[ ! -z "$offences" ]]
          then 
            echo $offences > reports/vet/offences.out
            exit 1
          else
            echo "No offences found\!"
          fi
      - name: Upload vet report to artifacts
        if: ${{ failure() }} 
        uses: actions/upload-artifact@v3
        with:
          name: vet
          path: ./reports/vet/offences.out
          
  unit-tests:
    runs-on: ubuntu-latest
    name: '[Go] Unit tests'
    steps:
      - uses: actions/checkout@master
      - name: Unit testing
        run: |
          mkdir reports && mkdir reports/tests
          go mod tidy
          go install github.com/jstemmer/go-junit-report@latest
          go test -v ./... > reports/tests/run.out | cat
          go test -v -coverprofile=reports/tests/cover.out ./...
          go test -v 2>&1 ./... | ~/go/bin/go-junit-report -set-exit-code > reports/tests/junit.out
      - name: Upload unit tests report to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tests
          path: ./reports/tests/*.out
  
  # Docker stuff ####################################################################
  docker-lint:
    runs-on: ubuntu-latest
    name: '[Docker] Lint'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile
      - name: Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
  # >>>>> NÃ£o temos o Sonar <<<<<
  # staticcodecheck:
  #   name: Static Code Check
  #   needs:
  #     - lint
  #     - unittesting
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: SonarCloud Scan
  #       uses: sonarsource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  notify:
    needs:
      - lint-check
      - vet-check
      - unit-tests
      - docker-lint
    if: always()
    runs-on: ubuntu-latest
    name: '[Teams] Notify'
    steps:
      - uses: toko-bifrost/ms-teams-deploy-card@master #  DO NOT set name.
        with:
          github-token: ${{ github.token }}
          webhook-uri: ${{ secrets.ACTIONS_TEAMS_WEBHOOK }}
          card-layout-exit: cozy
          show-on-exit: true
          show-on-start: false
      - name: check-failures
        if: needs.vet-check.result == 'failure' || needs.lint-check.result == 'failure' || needs.unit-tests.result == 'failure'
        run: exit 1
      - name: check-success
        if: needs.vet-check.result == 'success' && needs.lint-check.result == 'success' && needs.unit-tests.result == 'success'
        run: exit 0
