name: Quality Checks

on: pull_request
    
jobs:
  lint-check:
    - uses: actions/checkout@master 
    - name: Linting (pylint) 
      uses: ./ 
      with: 
        check: 'lint' 
        dest: "report" 
    - name: Upload lint report to artifacts 
      uses: actions/upload-artifact@v1 
      with: 
        name: lint 
        path: ./report/lint.txt # ${INPUT_DEST}/lint.txt 
  unit-tests:
    - uses: actions/checkout@master 
    - name: Unit testing 
      uses: ./ 
      with: 
        check: 'test' 
        dest: "report" 
    - name: Upload unit tests report to artifacts 
      uses: actions/upload-artifact@v1 
      with: 
        name: unittests 
        path: ./report/test.txt 
  
  # Docker stuff ####################################################################
  docker-lint:
    runs-on: ubuntu-latest
    name: '[Docker] Lint'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile
      - name: Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
  # >>>>> NÃ£o temos o Sonar <<<<<
  # staticcodecheck:
  #   name: Static Code Check
  #   needs:
  #     - lint
  #     - unittesting
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: SonarCloud Scan
  #       uses: sonarsource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  notify:
    needs:
      - lint-check
      - unit-tests
      - docker-lint
    if: always()
    runs-on: ubuntu-latest
    name: '[Teams] Notify'
    steps:
      - uses: toko-bifrost/ms-teams-deploy-card@master #  DO NOT set name.
        with:
          github-token: ${{ github.token }}
          webhook-uri: ${{ secrets.ACTIONS_TEAMS_WEBHOOK }}
          card-layout-exit: cozy
          show-on-exit: true
          show-on-start: false
      - name: check-failures
        if: needs.vet-check.result == 'failure' || needs.lint-check.result == 'failure' || needs.unit-tests.result == 'failure'
        run: exit 1
      - name: check-success
        if: needs.vet-check.result == 'success' && needs.lint-check.result == 'success' && needs.unit-tests.result == 'success'
        run: exit 0
